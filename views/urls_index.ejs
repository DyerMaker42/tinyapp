<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

  <!-- Bootstrap CSS -->
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/css/bootstrap.min.css" integrity="sha384-GJzZqFGwb1QTTN6wy59ffF1BuGJpLSa9DkKMp0DgiMDm4iYMj70gZWKYbI706tWS" crossorigin="anonymous">
  <title>TinyApp</title>
</head>
<body>
  <main style="margin: 1em;">
    <h3>My URLs</h3>
    <table class="table">
      <thead>
        <tr>
          <th scope="col">Short URL</th>
          <th scope="col">Long URL</th>
        </tr>
      </thead>
      <tbody>
        <% for(let url in urls) { %>
          <tr>
            <td><%= url %></td>
            <td><%= urls[url] %></td>
          </tr>
        <% } %>
      </tbody>
    </table>
  </main>
  <!-- Bootstrap JS -->
  <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js" integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous"></script>
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>
</body>
</html>
Notice the external link we've included in the <head> tag; this stylesheet is from Bootstrap, one of the most popular CSS frameworks around. We'll use it in our app so that we have some basic CSS styling available to us. We've also included a number of <script> tags at the bottom of our <body>; these javascript files are required by some of the components in Bootstrap.

Commit your changes.

Adding a Second Route and Template
Now we're going to add another page to display a single URL and its shortened form. The end point for such a page will be in the format /urls/:shortURL. The : in front of id indicates that id is a route parameter. This means that the value in this part of the url will be available in the req.params object.

For example, if the ID of the long url was b2xVn2, then the url would look like /urls/b2xVn2 in the browser. Further, the value of req.params.shortURL would be b2xVn2.

Route Parameters are described in more detail in the Express Documentation.

Render information about a single URL.

Create a new template file inside the views directory called urls_show.ejs. Use the example below to get you started.
Add a new route in express_server.js which we'll use to render this new template. Use the example below for what this will look like.
Use the shortURL from the route parameter to lookup it's associated longURL from the urlDatabase
Pass both of these values to the template in a templateVars object.
Fill out the urls_show.ejs template to display the long URL and its shortened form. Also include a link (href='#') for creating a new url.
<!DOCTYPE html>
<html lang="en">
<head>
  <!-- Bootstrap CSS -->
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/css/bootstrap.min.css" integrity="sha384-GJzZqFGwb1QTTN6wy59ffF1BuGJpLSa9DkKMp0DgiMDm4iYMj70gZWKYbI706tWS" crossorigin="anonymous">
  <title>URL - TinyApp Example</title>
</head>

<body>
  <div class="card text-center">
      <div class="card-header"></div>
      <div class="card-body">
        <h5 class="card-title">TinyURL for: <%= longURL %></h5>
        <p class="card-text">Short URL: